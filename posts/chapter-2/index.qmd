---
title: "Chapter 2"
author: "RWW"
date: "2022-09-22"
categories: [R]
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning=FALSE, message=FALSE, comment=NA, prompt=FALSE, fig.height=6, fig.width=6.5, fig.retina = 3, dev = 'svg', dev.args = list(bg = "transparent"))
```

1.  Create a character vector called my_names that contains all your first, middle and last names as elements. Calculate the length of my_names.

```{r}
my_names <- c("Robert","Wayne","Walker")
length(my_names)
```


2.  Create a second numeric vector called `which` which corresponds to my_names. The entries should be the position of each name in the order of your full name. Verify that it has the same length as my_names.

```{r}
which <- c(1,2,3)
length(which)
```


3.  Create a dataframe called names, which consists of the two vectors my_names and which as columns. Calculate the dimensions of names.

```{r}
names <- data.frame(my_names,which)
dim(names)
# str(names)
```

*3 rows and 2 columns*

4.  Create a new dataframe new_names with the which column converted to character type. Verify that your command worked using str().

```{r}
new_names <- data.frame(my_names, as.character(which))
str(new_names)
```


5.  Load the ugtests data set via the `peopleanalyticsdata` package or download it from the internet. Calculate the dimensions of ugtests and view the first three rows only.

```{r}
ugtests <- read.csv("http://peopleanalytics-regression-book.org/data/ugtests.csv")
dim(ugtests)
head(ugtests, 3)
```
*975 rows and 4 columns*

6.  View a statistical summary of all of the columns of ugtests. Determine if there are any missing values.

```{r}
summary(ugtests)
# Personally I prefer skim from skimr
# install.packages("skimr")
library(skimr)
skim(ugtests)
```

*There is no missing data.*

7.  View the subset of ugtests for values of Yr1 greater than 50.

```{r}
library(kableExtra)
subset(ugtests, subset = Yr1 > 50) %>% kable() %>% scroll_box(height="400px")
```


8.  Install and load the package dplyr. Look up the help for the filter() function in this package and try to use it to repeat the task in the previous question.

```{r}
# install.packages("dplyr")
library(dplyr)
filter(ugtests, Yr1 > 50) %>% kable() %>% scroll_box(height="400px")
```


9.  Write code to find the mean of the Yr1 test scores for all those who achieved Yr3 test scores greater than 100. Round this mean to the nearest integer.

```{r}
round(mean(ugtests$Yr1[ugtests$Yr3 > 100]), 0)
# with pipes
ugtests %>% filter(Yr3 > 100) %>% summarise(`Mean of Yr1` = round(mean(Yr1), 0))
```


10. Familiarize yourself with the two functions filter() and pull() from dplyr. Use these functions to try to do the same calculation in the previous question using a single unbroken piped command. Be sure to namespace where necessary.

```{r}
ugtests %>% filter(Yr3 > 100) %>% pull(Yr1) %>% mean() %>% round()
```


11. Create a scatter plot using the ugtests data with Final scores on the y-axis and Yr3 scores on the x axis.

```{r}
# plot(y=ugtests$Final, x=ugtests$Yr3, xlab="Yr3", ylab="Final")
library(ggplot2)
ggplot(ugtests) + aes(x=Yr3, y=Final) + geom_point()
```


12. Create your own 5-level grading logic and use it to create a new finalgrade column in the ugtests data set with grades 1--5 of increasing attainment based on the Final score in ugtests. Generate a histogram of this finalgrade column.

```{r}
ugtests$finalgrade <- as.numeric(cut(ugtests$Final, 5))
hist(ugtests$finalgrade)
```


13. Using your new ugtests data with the extra column from the previous exercise, create a box plot of Yr3 scores grouped by finalgrade.

```{r}
boxplot(Yr3~finalgrade, data=ugtests)
```


14. Knit all of your answers to these exercises into an R Markdown document. Create one version that displays your code and answers, and another that just displays the answers.

**I am going to cheat a bit.  I did it in `quarto` and it is one option to `code-fold`; so that both versions contain code, one hidden and one not with the option for the user to determine what they wish to see.**

One additional thing, base R graphics are kinda ugly.  We can use R's `esquisse` package to turn them to ggplots.

```{r}
library(ggplot2)
ugtests %>% 
  ggplot(.) + 
  aes(x=finalgrade) + 
  geom_histogram() +
  labs(x="Final Grade") +
  theme_minimal()
```



```{r}
ugtests %>% 
  ggplot(.) + 
  aes(y=Yr3, x=as.character(finalgrade), color=as.character(finalgrade)) + 
  geom_boxplot() +
  labs(x="Final Grade", y="Year 3") +
  theme_minimal() +
  guides(color="none")
```

